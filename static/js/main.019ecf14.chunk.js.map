{"version":3,"sources":["you_lose.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","words","App","props","keyboard","generateKeyboard","state","currentWord","randomWord","clickedLetters","life","matchedLetters","Math","floor","random","length","split","map","letter","value","toUpperCase","ishidden","i","key","String","fromCharCode","push","e","ispresent","this","currentLetter","target","textContent","clickedLetter","matchedLetter","setState","console","log","className","onClick","onClickTryAgain","bind","onClickReplay","includes","handleKeyClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,sC,4ICIrCC,G,YAAQ,CAAC,aAAc,eAAgB,OAAQ,WAAY,eA4IlDC,E,kDAzIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,SAAW,EAAKC,mBACrB,EAAKC,MAAQ,CACXC,YAAa,EAAKC,aAClBC,eAAgB,GAChBC,KAAM,EACNC,eAAgB,IAPD,E,yDAgBjB,OAJaV,EAAMW,KAAKC,MAAMD,KAAKE,SAAWb,EAAMc,SAC/BC,MAAM,IAAIC,KAAI,SAACC,GAClC,MAAO,CAAEC,MAAOD,EAAOE,cAAeC,UAAU,Q,yCAMlD,IADA,IAAMjB,EAAW,GACRkB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMC,EAAMC,OAAOC,aAAaH,EAAI,IACpClB,EAASsB,KAAKH,GAEhB,OAAOnB,I,qCAEMuB,GACb,IADgB,EACVlB,EAAiB,GACjBF,EAAc,GACdI,EAAiB,GACnBiB,GAAY,EACZlB,EAAOmB,KAAKvB,MAAMI,KAChBoB,EAAgBH,EAAEI,OAAOC,YANf,cAOGH,KAAKvB,MAAMC,aAPd,IAOhB,2BAA2C,CAAC,IAAnCW,EAAkC,QACrCY,IAAkBZ,EAAOC,QAC3BD,EAAOG,UAAW,EAClBO,GAAY,EACZjB,EAAee,KAAKI,IAEtBvB,EAAYmB,KAAZ,eAAsBR,KAbR,8BAgBXU,GACHlB,IAjBc,oBAoBUmB,KAAKvB,MAAMG,gBApBrB,IAoBhB,2BAAqD,CAAC,IAA7CwB,EAA4C,QACnDxB,EAAeiB,KAAKO,IArBN,kDAuBUJ,KAAKvB,MAAMK,gBAvBrB,IAuBhB,2BAAqD,CAAC,IAA7CuB,EAA4C,QACnDvB,EAAee,KAAKQ,IAxBN,8BA2BhBzB,EAAeiB,KAAKI,GACpBD,KAAKM,SAAS,CACZ5B,cACAE,iBACAC,OACAC,mBAEFyB,QAAQC,IAAI1B,K,wCAGZkB,KAAKM,SAAS,CACZ5B,YAAasB,KAAKrB,aAClBC,eAAgB,GAChBC,KAAM,EACNC,eAAgB,O,sCAIlBkB,KAAKM,SAAS,CACZ5B,YAAasB,KAAKrB,aAClBC,eAAgB,GAChBC,KAAM,EACNC,eAAgB,O,+BAGV,IAAD,OACP,OACE,yBAAK2B,UAAU,WACQ,IAApBT,KAAKvB,MAAMI,MACV,yBAAK4B,UAAU,QACb,yBAAKA,UAAU,cACf,yBACEA,UAAU,gBACVC,QAASV,KAAKW,gBAAgBC,KAAKZ,OAFrC,cAQHA,KAAKvB,MAAMK,eAAeI,SAAWc,KAAKvB,MAAMC,YAAYQ,QAC3D,yBAAKuB,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aAAaC,QAASV,KAAKa,cAAcD,KAAKZ,OAA7D,WAKJ,yBAAKS,UAAU,SACb,yBAAKA,UAAU,eAAf,mBACA,yBAAKA,UAAU,iBAAiBT,KAAKvB,MAAMI,OAE7C,yBAAK4B,UAAU,cACZT,KAAKvB,MAAMC,YAAYU,KAAI,SAACC,EAAQI,GACnC,OACE,yBAAKC,IAAKD,EAAGgB,UAAU,cACpBpB,EAAOG,SAAW,IAAMH,EAAOC,WAKxC,yBAAKmB,UAAU,YACZT,KAAKzB,SAASa,KAAI,SAACM,GAClB,OAAI,EAAKjB,MAAMG,eAAekC,SAASpB,GAEnC,yBAAKe,UAAU,cAAcf,IAAKA,GAC/BA,GAKL,yBACEA,IAAKA,EACLe,UAAU,MACVC,QAAS,EAAKK,eAAeH,KAAK,IAEjClB,Y,GAjICsB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.019ecf14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/you_lose.10b6602b.png\";","import React, { Component } from \"react\"\nimport \"./you_lose.png\"\nimport \"./App.css\"\n\nconst words = [\"grossebite\", \"enormefesses\", \"mimi\", \"anhyeuem\", \"ciupciupka\"]\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.keyboard = this.generateKeyboard()\n    this.state = {\n      currentWord: this.randomWord(),\n      clickedLetters: [],\n      life: 5,\n      matchedLetters: [],\n    }\n  }\n\n  randomWord() {\n    const word = words[Math.floor(Math.random() * words.length)]\n    const letters = word.split(\"\").map((letter) => {\n      return { value: letter.toUpperCase(), ishidden: true }\n    })\n    return letters\n  }\n  generateKeyboard() {\n    const keyboard = []\n    for (let i = 0; i < 26; i++) {\n      const key = String.fromCharCode(i + 65)\n      keyboard.push(key)\n    }\n    return keyboard\n  }\n  handleKeyClick(e) {\n    const clickedLetters = []\n    const currentWord = []\n    const matchedLetters = []\n    let ispresent = false\n    let life = this.state.life\n    const currentLetter = e.target.textContent\n    for (let letter of this.state.currentWord) {\n      if (currentLetter === letter.value) {\n        letter.ishidden = false\n        ispresent = true\n        matchedLetters.push(currentLetter)\n      }\n      currentWord.push({ ...letter })\n    }\n\n    if (!ispresent) {\n      life--\n    }\n\n    for (let clickedLetter of this.state.clickedLetters) {\n      clickedLetters.push(clickedLetter)\n    }\n    for (let matchedLetter of this.state.matchedLetters) {\n      matchedLetters.push(matchedLetter)\n    }\n\n    clickedLetters.push(currentLetter)\n    this.setState({\n      currentWord,\n      clickedLetters,\n      life,\n      matchedLetters,\n    })\n    console.log(matchedLetters)\n  }\n  onClickTryAgain() {\n    this.setState({\n      currentWord: this.randomWord(),\n      clickedLetters: [],\n      life: 5,\n      matchedLetters: [],\n    })\n  }\n  onClickReplay() {\n    this.setState({\n      currentWord: this.randomWord(),\n      clickedLetters: [],\n      life: 5,\n      matchedLetters: [],\n    })\n  }\n  render() {\n    return (\n      <div className=\"contenu\">\n        {this.state.life === 0 && (\n          <div className=\"lose\">\n            <div className=\"logo_lose\"></div>\n            <div\n              className=\"lose_tryagain\"\n              onClick={this.onClickTryAgain.bind(this)}\n            >\n              Try again\n            </div>\n          </div>\n        )}\n        {this.state.matchedLetters.length === this.state.currentWord.length && (\n          <div className=\"win\">\n            <div className=\"logo_win\"></div>\n            <div className=\"win_replay\" onClick={this.onClickReplay.bind(this)}>\n              Replay\n            </div>\n          </div>\n        )}\n        <div className=\"lives\">\n          <div className=\"lives_title\">lives remaining</div>\n          <div className=\"lives_content\">{this.state.life}</div>\n        </div>\n        <div className=\"letter_bar\">\n          {this.state.currentWord.map((letter, i) => {\n            return (\n              <div key={i} className=\"letter_box\">\n                {letter.ishidden ? \"_\" : letter.value}\n              </div>\n            )\n          })}\n        </div>\n        <div className=\"keyboard\">\n          {this.keyboard.map((key) => {\n            if (this.state.clickedLetters.includes(key)) {\n              return (\n                <div className=\"clicked_key\" key={key}>\n                  {key}\n                </div>\n              )\n            }\n            return (\n              <div\n                key={key}\n                className=\"key\"\n                onClick={this.handleKeyClick.bind(this)}\n              >\n                {key}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}